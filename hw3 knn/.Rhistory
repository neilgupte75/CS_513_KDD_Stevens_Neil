X<-25
x<-25
x
x
hello<-"hello world"
print(hello)
hello
help()
help(c)
?c()
example(c)
help.start()
x<-c(1,2,2,NA,5,10)
min(x)
)
max(x)
mean(x)
?min()
min(x,na.rm=TRUE)
max(x,na.rm=TRUE)
mean(x,na.rm=TRUE)
y<-min(x,na.rm=TRUE)
summary(y)
summary(x)
ls()
ls()
rm(y)
ls() #list of objects in memory
hello<-"hello world"
print(hello)
hello
help()
help(c)
?length
?length(hello)
length(hello)
nchar(hello)
?is.vector()
x1<-(10,5,6,6,6,7)
x1<-c(10,5,6,6,6,7)
print(x1)
mode(x1)
hello<-"hello world"
mode(hello)
x2<-(1,2,3,4)
x3<-x1+x2
x2<-(1,2,3,4)
x2<-c(1,2,3,4)
x3<-x1+x2
print(x3)
x2<-c(1,2,3)
x3<-x1+x2
print(x3)
?seq()
x4<-seq(from=10.2,to=26.5,by=1)
print(X4)
print(x4)
typeof(x4)
x5<-seq(from=1,to=6,by=1)
print(x5)
x5<-seq(from=1,to=6,by=1)
print(x5)
x6<-1:6
print(x6)
x7<-as.integer(x5)
x7<-as.integer(x5)
typeof(x7)
x6<-1:6
print(x6)
typeof(x6)
mixed_vector<-c(1,2,8.5,'5')
mixed_vector<-c(1,2,8.5,'5')
typeof(mixed_vector)
mixed_vector<-c(1,2,8.5,'5')
mode(mixed_vector)
typeof(mixed_vector)
ls()
rm(list=ls())
rm(list=ls())
ls()
ls()
rm(list=ls())
ls()
ls()
myfirstname<-"Neil"
mylastname<-"Gupte"
myfirstname<-"Neil"
print(myfirstname)
mylastname<-"Gupte"
print(mylastname)
myfirstlast<-c(myfirstname,mylastname)
myfirstlast<-c(myfirstname,mylastname)
print(myfirstlast)
rm(myfirstname)
print(myfirstlast)
myfirstname<-"Atharva"
myfirstlast<-c(myfirstname,mylastname)
myfirstlast<-c(myfirstname,mylastname)
print(myfirstlast)
avector
avector<-c(1,2,3,4)
avector
typeof(avector)
names(avector)<-c("one,"two","three","four")
names(avector)<-c("one","two","three","four")
names(avector)<-c("one","two","three","four")
avector
typeof(avector)
elementnames<-names(avector)
avector
is.vector(avector)
?factor()
cat<-c("good,"bad,"good","bad","good","bad")
cat<-c("good,"bad","good","bad","good","bad")
cat<-c("good","bad","good","bad","good","bad")
typeof(cat)
cat2<-factor(cat)
cat2
typeof(cat)
typeof(cat2)
cat3<-factor(cat,levels=(c("good","bad")))
cat3
catnum<-as.numeric(cat3)
catnum
days_fac<-factor(days)
days<-c("mon","tues","wed","thurs","fri")
days_fac<-factor(days)
days_fac
my.lst<-list(34445,c("neil","asdads"),c(2,1,2))
my.lst
my.lst<-list(stud.id=34445,stud.name=c("neil","asdads"),stud.marks=c(2,1,2))
my.lst
is.list(my.lst)
mode(my.lst)
typeof(my.lst)
length(my.lst)
my.lst2<-list(seq=1:10,my.lst)
my.lst2
my.lst2
length(my.lst)
length(my.lst2)
my.dataset<-data.frame(site=c('A','B','C','D','E'),ph=c(1,2,3,4,5))
length(my.dataset)
is.list(my.dataset)
is.matrix(my.dataset)
is.data.frame(my.dataset)
typeof(my.dataset)
View(my.dataset)
data("iris")
data(iris)
view(iris)
View(iris)
length(iris)
nrow(iris)
is.data.frame(iris)
read.csv()
?read.csv()
?factor
?read.csv()
avector<-c(1,2,3,4)
typeof(avector)
second<-avector[2]
second
second<-avector["second"]
second
avector
names(avector)<-c("first","second","third","fourth")
second<-avector["second"]
second
second<-avector[2]
second
avector
avector[22]
avector[2]<-22
avector
my.lst<-list(stud.id=34445,stud.name=c("neil","asdads"),stud.marks=c(2,1,2))
my.lst[2]
typeof(my.lst[2])
my.lst2[[2]]
my.lst[[2]]
typeof(my.lst[[2]])
is.vector(my.lst[[2]])
element2<-my.lst[[2]]
ln<-my.lst[[2]][2]
ln
rm(ls)
rm(list=ls())
data()
data(iris)
View(iris)
iris[5,4]
iris[-3,]
iris[,-3]
iris[-3,]
iris[,-3]#everything except 3 column
iris[-3,] #everything except 3 row
iris[c(13,5,10),c(5,2,4)]
subset4<-iris[c(T,F,F,F),]
subset4
?sample
sample(100,60)
sample(160,60)
idx<-sample(nrow(iris),as.integer(.65*nrow(iris))
idx
idx<-sample(nrow(iris),as.integer(.65*nrow(iris)))
idx
training<-iris[idx,]
test<-iris[-idx,]
idx<-seq(1,nrow(iris),5)
idx
vec<-1:20
mnnorm(vec)
mnnorm<-function(x.minx,maxx)
{
z<-((x-minx)/(maxx-minx))
return(z)
}
mnnorm(vec)
mnnorm<-function(x,minx,maxx)
{
z<-((x-minx)/(maxx-minx))
return(z)
}
vec<-1:20
mnnorm(vec)
mnnorm(vec,1,20)
install.packages(c("kknn", "VIM"))
rm(list=ls())
data(iris)
View(iris)
length(iris)
nrow(iris)
iris_missing<-iris
iris_missing[c(3,30,40),3]<-NA
View(iris_missing)
View(iris_missing)
View(iris)
View(iris)
summary(iris_missing)
?boxplot()
boxplot(iris[1:3])  ### sepal width contains some outliers ###
?hist()
hist(iris$Sepal.Length)
?pairs()
pairs(iris[1:2])
pairs(iris[1:4])
pairs(iris[1:4], main="Iris Data", pch=10)
pairs(iris[1:4])
pairs(iris[1:4], main="Iris Data", pch=1)
pairs(iris[1:4], main="Iris Data", pch=20)
pairs(iris[1:4], main="Iris Data", pch=10)
pairs(iris[1:4], main="Anderson's Iris Data -- 3 species", pch=21, bg=c("red", "green3","blue")[factor(iris$species)])
pairs(iris[1:4], main="Anderson's Iris Data -- 3 species", pch=21, bg=c("red", "green3","blue")[factor(iris$Species)])
?plot()
?plot()
plot(iris[,1:2])
?na.omit
iris_missing<-na.omit(iris_missing)
x<-c(1,2,6,6,6,7,7,7)
unique.x<-unique(x)
?match()
match(x, unique.x) ### matches the elements in x with unique.x and gives the index of the matched position ###
?tabulate()
tab<-tabulate(match(x, unique.x)) ### tabulate: counts the repitition ###
unique.x[tab==max(tab)]
max(x)
max(unique.x)
max(tab)
mfv <- function(x) {
unique.x<-unique(x)
tab<-tabulate(match(x, unique.x))
unique.x[tab==max(tab)]
}
mfv.x<-mfv(x)
mfv.x<-mfv(x)
mfv.x               ### the most frequent value may not be unique ###
is.vector(mfv.x)
?sample()
library("kknn")
?kknn()
predict_k5<-kknn(formula=Species~.,training, test[,-5], k=5, kernel='rectangular')
index <- seq(1,nrow(iris),by=5)
index
test<-iris[index,]
training<-iris[-index,]
predict_k5<-kknn(formula=Species~.,training, test[,-5], k=5, kernel='rectangular')
predict_k5
fit<-fitted(predict_k5)
table(Actual=test$Species, fit)
iris_normalized<-as.data.frame (
cbind( Sepal.Length=mmnorm(iris[,1],min(iris[,1]),max(iris[,1]))
, sepal.Width=mmnorm(iris[,2],min(iris[,2]),max(iris[,2] ))
,Petal.Length=mmnorm(iris[,3],min(iris[,3]),max(iris[,3] ))
, Petal.Width=mmnorm(iris[,4],min(iris[,4]),max(iris[,4] ))
,Species=as.character(iris[,5])
)
)
###  rectangular: unweighted, default: Euclidian, k=5: picking the 5 nearest neighbours  ###
predict_k5<-kknn(formula=Species~.,training, test[,-5], k=5, kernel='rectangular')
predict_k5
predict_k5
table(Actual=test$Species, fit)
test<-iris_normalized[index,]
training <-iris_normalized[-index,]
predict_k5 <- kknn(formula=Species~., training, test[,-5], k=5,kernel ="triangular" )
fit <- fitted(predict_k5)
table(Actual=test$Species,fit)
install.packages("VIM")
library('VIM')
rm(list=ls())
rm(list=ls())
getwd()
setwd("C:/cs 513 HOMEWORK/hw3 knn")
dataset<-read.csv('breast-cancer-wisconsin.data.csv',na.string="?")
dataset1<-na.omit(dataset)
library(kknn)
dataset1$Class<- factor(dataset1$Class , levels = c("2","4") , labels = c("Benign","Malignant"))
summary(dataset1)
sample_size = round(nrow(dataset1)*.70) # setting what is 70%
index <- sample(seq_len(nrow(dataset1)), size = sample_size)
norm<-function(x) { (x -min(x))/(max(x)-min(x))   }
minmaxnorm <- as.data.frame(lapply(dataset1[,c(2,3,4,5,6,7,8,9,10)], norm))
dataset1Class = dataset1['Class']
summary(minmaxnorm)
train <- minmaxnorm[index, ]
trainclass<-dataset1Class[index,]
test <- minmaxnorm[-index, ]
testclass<-dataset1Class[-index,]
model1<-kknn(Class~,train,test, k=3, kernel='rectangular')
model1<-kknn(class~,train,test, k=3, kernel='rectangular')
model1<-kknn(trainclass,train,test, k=3, kernel='rectangular')
model1<-kknn(formula=formula(trainclass),train,test, k=3, kernel='rectangular')
model1<-kknn(formula=formula(train),train,test, k=3, kernel='rectangular')
View(model1)
View(model1)
model1<-kknn(formula=Class~.,train,test, k=3, kernel='rectangular')
View(minmaxnorm)
View(minmaxnorm)
View(dataset1Class)
View(dataset1Class)
View(dataset1Class)
View(dataset1Class)
model1<-kknn(formula= trainclass,train,test, k=3, kernel='rectangular')
model1<-kknn(formula= trainclass~,train,test, k=3, kernel='rectangular')
model1<-kknn(formula= trainclass~.,train,test, k=3, kernel='rectangular')
confusionmatrix1 <- table(model1, testclass)
prediction <- predict(model1, test)
prediction <- predict(model1, testclass)
model1<-kknn(formula= trainclass~.,train,test, k=3, kernel='rectangular')
prediction <- predict(model1, testclass)
prediction <- predict(model1,test)
prediction <- predict(model1,testclass~.)
prediction <- predict(model1,type="prob")
View(prediction)
View(prediction)
prediction <- predict(model1)
confusionmatrix1 <- table(model1,predict)
confusionmatrix1 <- table(predict,test)
confusionmatrix1 <- table(predict,testclass)
confusionmatrix1 <- table(predict,testclass~.)
model1<-kknn(formula= trainclass~.,train,test, k=3, kernel='rectangular')
prediction <- predict(model1)
confusionmatrix1 <- table(predict,testclass~.)
