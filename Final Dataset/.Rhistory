summary(predict_k1)
confusionmatrix<-table(test$STATUS,fit)
#ggplot(confusionmatrix, aes(x=fit, y = Freq, fill=Var1)) + geom_bar(stat="identity")
grid.table(confusionmatrix)
confusionmatrix
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix)
predict_k1 <- kknn(formula= STATUS~., train[,c(-1,-4,-11,-12,-14,-22)] , test[,c(-1,-4,-11,-12,-14,-22)], k=50,kernel ="triangular")
fit <- fitted(predict_k1)
confusionmatrix<-table(test$STATUS,fit)
#ggplot(confusionmatrix, aes(x=fit, y = Freq, fill=Var1)) + geom_bar(stat="identity")
grid.table(confusionmatrix)
confusionmatrix
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix)
predict_k1 <- kknn(formula= STATUS~., train[,c(-1,-4,-11,-12,-14,-22)] , test[,c(-1,-4,-11,-12,-14,-22)], k=50,kernel ="triangular")
fit <- fitted(predict_k1)
confusionmatrix<-table(test$STATUS,fit)
#ggplot(confusionmatrix, aes(x=fit, y = Freq, fill=Var1)) + geom_bar(stat="identity")
grid.table(confusionmatrix)
confusionmatrix
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix)
library(e1071)
library(class)
model2<- naiveBayes(STATUS ~ ., data = train[c(-1,-4,-11,-12,-14,-22)])
prediction2<- predict(model2, test[c(-1,-4,-11,-12,-14,-22)])
confusionmatrix2 <- table(prediction_model=prediction2, test_class=test$STATUS)
print(confusionmatrix2)
grid.table(confusionmatrix2)
summary(model2)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix2)
library(class)
library(rpart)
library(rpart.plot)
library(rattle)
train3<-train[c(-1,-4,-11,-12,-14,-22)]
test3<-test[c(-1,-4,-11,-12,-14,-22)]
cartmodel <- rpart(STATUS ~ ., data = train3, method = "class")
rpart.plot(cartmodel)
fancyRpartPlot(cartmodel)
prediction3<- predict(cartmodel, test3,type="class")
confusionmatrix3 <- table(prediction_model=prediction3, test_class=test$STATUS)
print(confusionmatrix3)
grid.table(confusionmatrix3)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix3)
prediction3<- predict(cartmodel, test3,type="class")
confusionmatrix3 <- table(prediction_model=prediction3, test_class=test$STATUS)
print(confusionmatrix3)
grid.table(confusionmatrix3)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix3)
library(class)
library(rpart)
library(rpart.plot)
library(rattle)
train3<-train[c(-1,-4,-11,-12,-14,-22,-27)]
test3<-test[c(-1,-4,-11,-12,-14,-22,-27)]
cartmodel <- rpart(STATUS ~ ., data = train3, method = "class")
rpart.plot(cartmodel)
library(class)
library(rpart)
library(rpart.plot)
library(rattle)
train3<-train[c(-1,-4,-11,-12,-14,-22,-26,-27)]
test3<-test[c(-1,-4,-11,-12,-14,-22,-26,-27)]
cartmodel <- rpart(STATUS ~ ., data = train3, method = "class")
rpart.plot(cartmodel)
fancyRpartPlot(cartmodel)
prediction3<- predict(cartmodel, test3,type="class")
library(e1071)
library(class)
model2<- naiveBayes(STATUS ~ ., data = train[c(-1,-4,-11,-12,-14,-22)])
prediction2<- predict(model2, test[c(-1,-4,-11,-12,-14,-22)])
confusionmatrix2 <- table(prediction_model=prediction2, test_class=test$STATUS)
print(confusionmatrix2)
grid.table(confusionmatrix2)
summary(model2)
library(class)
library(rpart)
library(rpart.plot)
library(rattle)
train3<-train[c(-1,-4,-11,-12,-14,-22)]
test3<-test[c(-1,-4,-11,-12,-14,-22)]
cartmodel <- rpart(STATUS ~ ., data = train3, method = "class")
rpart.plot(cartmodel)
prediction3<- predict(cartmodel, test3,type="class")
confusionmatrix3 <- table(prediction_model=prediction3, test_class=test$STATUS)
print(confusionmatrix3)
grid.table(confusionmatrix3)
dev.off()
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix3)
prediction3<- predict(cartmodel, test3,type="class")
confusionmatrix3 <- table(prediction_model=prediction3, test_class=test$STATUS)
print(confusionmatrix3)
grid.table(confusionmatrix3)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix3)
library(C50)
model4<-C5.0(STATUS~.,train3)
library(randomForest)
train1<-train
test1<-test
train1$JOBCODE<-NULL
train1$JOB_GROUP<-NULL
train1$REFERRAL_SOURCE<-NULL
test1$JOBCODE<-NULL
test1$JOB_GROUP<-NULL
test1$REFERRAL_SOURCE<-NULL
fit <- randomForest( STATUS~., data=train1[,c(-1,-4,-11,-12,-14,-23)], importance=TRUE, ntree=1000)
fit <- randomForest( STATUS~., data=train1[,c(-1,-4,-11,-12,-14,-22)], importance=TRUE, ntree=1000)
imp<-importance(fit)
fit <- randomForest( STATUS~., data=train1[,c(-1,-4,-11,-12,-14,-22)], importance=TRUE, ntree=1000)
imp<-importance(fit)
varImpPlot(fit)
imp
grid.table(imp)
imp<-importance(fit)
grid.table(imp)
varImpPlot(fit)
Prediction <- predict(fit, test1[,c(-1,-4,-11,-12,-14,-23)])
confusionmatrix5 <- table(actual=test1$STATUS,Prediction)
print(confusionmatrix5)
grid.table(confusionmatrix5)
fit <- randomForest( STATUS~., data=train1[,c(-1,-4,-11,-12,-14,-22)], importance=TRUE, ntree=1000)
imp<-importance(fit)
grid.table(imp)
varImpPlot(fit)
Prediction <- predict(fit, test1[,c(-1,-4,-11,-12,-14,-23)])
fit <- randomForest( STATUS~., data=train1[,c(-1,-4,-11,-12,-14,-22)], importance=TRUE, ntree=1000)
imp<-importance(fit)
grid.table(imp)
varImpPlot(fit)
Prediction <- predict(fit, test1[,c(-1,-4,-11,-12,-14,-22)])
confusionmatrix5 <- table(actual=test1$STATUS,Prediction)
print(confusionmatrix5)
grid.table(confusionmatrix5)
Prediction <- predict(fit, test1[,c(-1,-4,-11,-12,-14,-22)])
confusionmatrix5 <- table(actual=test1$STATUS,Prediction)
print(confusionmatrix5)
grid.table(confusionmatrix5)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix5)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=5, threshold=0.05)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=5, threshold=0.05)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=5, threshold=0.05)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=5, threshold=0.05)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=5, threshold=0.05)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
library(randomForest)
train1<-train
test1<-test
train1$JOBCODE<-NULL
train1$JOB_GROUP<-NULL
train1$REFERRAL_SOURCE<-NULL
test1$JOBCODE<-NULL
test1$JOB_GROUP<-NULL
test1$REFERRAL_SOURCE<-NULL
fit <- randomForest( STATUS~., data=train1[,c(-1,-4,-11,-12,-14,-22)], importance=TRUE, ntree=1000)
imp<-importance(fit)
grid.table(imp)
varImpPlot(fit)
Prediction <- predict(fit, test1[,c(-1,-4,-11,-12,-14,-22)])
confusionmatrix5 <- table(actual=test1$STATUS,Prediction)
print(confusionmatrix5)
grid.table(confusionmatrix5)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix5)
library(randomForest)
train1<-train
test1<-test
train1$JOBCODE<-NULL
train1$JOB_GROUP<-NULL
train1$REFERRAL_SOURCE<-NULL
test1$JOBCODE<-NULL
test1$JOB_GROUP<-NULL
test1$REFERRAL_SOURCE<-NULL
fit <- randomForest( STATUS~., data=train1[,c(-1,-4,-11,-12,-14,-22)], importance=TRUE, ntree=1000)
imp<-importance(fit)
grid.table(imp)
varImpPlot(fit)
Prediction <- predict(fit, test1[,c(-1,-4,-11,-12,-14,-22)])
confusionmatrix5 <- table(actual=test1$STATUS,Prediction)
print(confusionmatrix5)
grid.table(confusionmatrix5)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix5)
set.seed(100)
library(randomForest)
train1<-train
test1<-test
train1$JOBCODE<-NULL
train1$JOB_GROUP<-NULL
train1$REFERRAL_SOURCE<-NULL
test1$JOBCODE<-NULL
test1$JOB_GROUP<-NULL
test1$REFERRAL_SOURCE<-NULL
fit <- randomForest( STATUS~., data=train1[,c(-1,-4,-11,-12,-14,-22)], importance=TRUE, ntree=1000)
imp<-importance(fit)
grid.table(imp)
varImpPlot(fit)
fit <- randomForest( STATUS~., data=train1[,c(-1,-4,-11,-12,-14,-22)], importance=TRUE, ntree=1000)
imp<-importance(fit)
grid.table(imp)
varImpPlot(fit)
Prediction <- predict(fit, test1[,c(-1,-4,-11,-12,-14,-22)])
confusionmatrix5 <- table(actual=test1$STATUS,Prediction)
print(confusionmatrix5)
grid.table(confusionmatrix5)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix5)
set.seed(100)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=10, threshold=0.05)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=7, threshold=0.05)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=7, threshold=0.01)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
set.seed(100)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=7, threshold=0.01)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=7, threshold=0.01)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
set.seed(100)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=5, threshold=0.01)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
set.seed(100)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=5, threshold=0.02)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
set.seed(100)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=10, threshold=0.02)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
set.seed(100)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=7, threshold=0.05)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
set.seed(100)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=7, threshold=0.05)
plot(model6)
summary(model6)
set.seed(100)
library(neuralnet)
dataSet<-data.frame(lapply(na.omit(dataset),as.numeric))
idx<-sort(sample(nrow(dataSet),as.integer(.70*nrow(dataSet))))
train2 <- dataSet[idx, ]
test2 <- dataSet[-idx, ]
?neuralnet()
model6<- neuralnet(STATUS~.,train2[c(-1,-4,-11,-12,-14,-22)], hidden=7, threshold=0.05)
plot(model6)
summary(model6)
ann <-compute(model6,test2[,c(-1,-4,-11,-12,-14,-22)])
ann$net.result
ann_cat<-ifelse(ann$net.result <1.5,1,2)
length(ann_cat)
length(test2$STATUS)
confusionmatrix6<-table(ann_cat,test2$STATUS)
grid.table(confusionmatrix6)
wrong<- (test2$STATUS!=ann_cat)
errorRate<-sum(wrong)/length(wrong)
errorRate
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusionmatrix6)
